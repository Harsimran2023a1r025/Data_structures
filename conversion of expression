//5Th manual program

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define max 100
char stack[max];
int top=-1;
char val;
void push(char stack[], char);
char pop(char stack[]);
void reverse(char str[]);
void infixtopostfix(char source[], char target[]);
void prefixtoinfix(char source[], char target[]);
void postfixtoinfix(char source[], char target[]);
int getpriority(char);
char infix[100],postfix[100],temp[100],prefix[100];
void reverse(char str[])//reversing the string 
{
    int len,i=0,j=0;
    len=strlen(str);//lenght of the string
    j=len-1;
    while(j>=0)//till j not reaches to 0 i.e if lenght is 5 it starts from the last position
    {
        if(str[j]=='(')//revers means if find open brace push the close brace and similar in below case 
        {
            temp[i]=')';
        }
        else if(str[j]==')')
        {
            temp[i]='(';
        }
        else
        {
            temp[i]=str[j];//last elemnt of string is storing at first position in new string
        }
        i++;//i is incrementing at it is storing the reverse array in sequential order
        j--;//and j is decrementing as it coming back from the last position
    }
    temp[i]='\0';
}
void infixtopostfix(char source[], char target[])
{
    int i=0,j=0;
    char t;
    strcpy(target,"");//making target array as empty
    while(source[i]!='\0')//while the given string not gets empty
    {
        if(source[i]=='(')//if we find open brace 
        {
            push(stack, source[i]);//push that index pos value to stack 
            i++;//and checks the next pos while incrementing i
        }
        else if((isdigit(source[i]))||(isalpha(source[i])))//if we find operand
        {
            target[j]=source[i];//push that string value to target string
            i++;//and increment the values
            j++;
        }
        
        else if(source[i]==')')//is find closing brace
        {
            while((top!=-1)&&(stack[top]!='('))//till top becomes empty and also till top not reaches to open brace
            {
                target[j]=pop(stack);//pop the elements form the stack and put them in target string 
                j++;
            }
            if(top==-1)
            {
                printf("\nInvalid expression...");
                
            }
            t=pop(stack);//the remaing elemnets in stack will poped up and store in t
            i++;   
        }
        
        else if((source[i]=='+')||(source[i]=='-')||(source[i]=='*')||(source[i]=='/')||(source[i]=='%')||(source[i]=='^'))//if we find operator 
        {
            while((top!=-1)&&(stack[top]!='(')&&(getpriority(stack[top])>=getpriority(source[i])))//if stack operator has greater presedence than reading operator 
            //pop the stack operator and push in target as per the algorithm
            {
                target[j]=pop(stack);
                j++;
            }
            push(stack,source[i]);//if not simply push reading character to stack
            i++;

        }
        else
        {
            printf("\nInvalid expression...");
        }
        
    
    }
    while((top!=-1)&&(stack[top]!='('))
        {
            target[j]=pop(stack);//this is for the remainig elements 
            j++;
        }
        target[j]='\0';
}
int getpriority(char o)//this is to check the presedence of operatore
//the greater the return number the higher the presedence
{
    if(o=='^')
    {
        return  2;
    }
    else if((o=='/')||(o=='*')||(o=='%'))
    {
        return 1;
    }
    else if((o=='+')||(o=='-'))
    {
        return 0;
    }
}
void push(char stack[], char val)
{
    if(top==max-1)
    {
        printf("Overflow.....");
    }
    else{
        top++;
        stack[top]=val;
    }
}
char pop(char stack[])
{
    
    if(top==-1)
    {
        printf("Underflow....");
    }
    else{
        val=stack[top];
        top--;
        
    }
    return val;
}
void prefixtoinfix(char source[], char target[]) {
    int i=0; 
    int k=0;
    int len=strlen(source);
    char temp[100], s1[100][30];
    strcpy(target, "");//making string target as empty
    for(i=len-1;i>=0;i--) {//taking it from right to left as per the algorithm
        if (isalnum(source[i])) {//if operand 
            char t[]={source[i],'\0'};//string t stores the reading character value
            strcpy(s1[k++], t);//in 2d array store that t value
            
        } else {//if we find operator pop the last 2 operands from the s1 2d array as per the algorithm 
            char *op1 = s1[--k]; // First operand
            char *op2 = s1[--k]; // Second operand
            sprintf(temp, "(%s%c%s)", op1, source[i], op2); // Create infix expression 
            strcpy(s1[k++], temp); // Push the infix expression onto stack
            
        }
    } 
    strcpy(target, s1[--k]); // The final infix expression will be at the top of the stack
}

void postfixtoinfix(char source[], char target[]) {
    int i = 0;
    int k = 0;
    int len=strlen(source);
    char temp[100],s1[100][30];
    strcpy(target, "");
    for(i=0;i<=len-1;i++) {//from left to right as per algorithm
        if (isalnum(source[i])) {
            char t[]={source[i],'\0'};
            strcpy(s1[k++], t);
        } else {//
            char *op2 = s1[--k]; // Second operand
            char *op1 = s1[--k]; // First operand
            sprintf(temp, "(%s%c%s)", op1, source[i], op2); // Create infix expression
            strcpy(s1[k++], temp); // Push the infix expression onto stack
        }
        
    }
    strcpy(target, s1[--k]); // The final infix expression will be at the top of the stack
}

int main()
{
    int ch;
    printf("1.Infix to Postfix\n2.Infix to Prefix\n3.Prefix to Infix\n4.Postfix to Infix");
    printf("\nEnter your choice:");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:
            printf("Enter the Infix expression: ");
            scanf("%s",infix);
            
            strcpy(postfix,"");
            infixtopostfix(infix,postfix);
            printf("\nThe postfix expression is: %s",postfix);   
            break;
        case 2:
            printf("Enter the Infix expression: ");
            scanf("%s",infix);
            reverse(infix);
            printf("\nThe reverse infix expression is:temp= %s",temp);
            strcpy(postfix,"");
            infixtopostfix(temp,postfix);
            printf("\nThe postfix expression is: %s",postfix); 
            reverse(postfix);           
            printf("\nThe prefix expression is: %s",temp);
            break;
        case 3:
            printf("Enter the prefix expression: ");
            scanf("%s",prefix);       
            strcpy(infix,"");
            prefixtoinfix(prefix,infix);
            printf("\nThe Infix expression is: %s\n",infix);   
            break; 
        case 4:
            printf("Enter the postfix expression: ");
            scanf("%s",postfix);            
            strcpy(infix,"");
            postfixtoinfix(postfix,infix);
            printf("\nThe Infix expression is: %s",infix);   
            break; 
        default:
            printf("Invalid...");
    }
   
}
