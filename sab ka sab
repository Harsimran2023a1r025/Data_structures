//infix to postfix reverse the infix expression then find the postfix and then revrse that postix expression
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define max 100
char stack[max];
char infix[100], postfix[100],t[100],prefix[100];//t[100]is for prefix
int top = -1;
char val; // assigning character value as empty so it can hold stack characters
void push(char stack[], char);
char pop(char stack[]);
void infixtopostfix(char source[], char target[]); // source is given expression and target is the postfix
int getpriority(char);                             // to check the presedence of operators
void reverse(char str[]);
void prefixtoinfix(char source[], char target[]);
void postfixtoinfix(char source[], char target[]);
int main()
{
   int ch;
   printf("1.infix to postfix\n2. for infix to prefix\n3.prefix to infix\n4.postfix to infix");
   scanf("%d",&ch);
   switch(ch)
   {
    case 1:
    printf("Enter the infix expression\n");
    scanf("%s", infix);
    strcpy(postfix, "");            // to make postfix string empty all 100 positions
    infixtopostfix(infix, postfix); // calling the function
    printf("\nthe postfix expression is\n");
    printf("%s", postfix);
    break;
    case 2:
    //step 1
     printf("Enter the infix expression\n");
    scanf("%s", infix);
    reverse(infix);//according to infix to prefix algorithm
    printf("Ther revrsed inix expression is %s",t);
    strcpy(postfix, "");            // to make postfix string empty all 100 positions
    //step 2
    infixtopostfix(t, postfix); // because the revrse infix expression is stored in t so we have to call t in place of infix in this function calling
    printf("\nthe postfix expression is\n");
    printf("%s", postfix);
    //step 3
    reverse(postfix);
    printf("\nthe prefix expression is\n");
    printf("%s", t);
    break;
    case 3:
    printf("Enter the prefix expression\n");
    scanf("%s", prefix);
    reverse(prefix);
    strcpy(infix, "");            // to make postfix string empty all 100 positions
    prefixtoinfix(t,infix); // calling the function
    printf("\nthe infix expression is\n");
    printf("%s", infix);
    
    break;
    case 4:
    printf("Enter the postfi expression\n");
    scanf("%s", postfix);
    strcpy(infix, "");            // to make postfix string empty all 100 positions
    postfixtoinfix(postfix,infix); // calling the function
    printf("\nthe infix expression is\n");
    printf("%s", infix);
    break;

    default:
    printf("Invalid choice");
    break;
   }
   return 0;
}
void reverse(char str[])
{
    int len,i=0,j=0;//i is index pos of result is t  and j is for given string  like (A+B)
    len=strlen(str);//5
    j=len-1;//4
    while(j>=0)//0 1 2 3 4  form 4 to 1 till it is greater then zero
    { // to changing right parenthisis to left while reversing the string and vice-versa
        if(str[j]=='(')
        {
            t[i]=')';
        }
        else if(str[j]==')')
        {
            t[i]='(';
        }
        else{
            t[i]=str[j];//not for parenthesis it is for the keywords in the parenthsis
        }
        i++;
        j--;
        
    }
    t[i]='\0';
}
//to postfix
void infixtopostfix(char source[], char target[])
{
    int i = 0, j = 0; // i to iterate through each character of given string or source and j is to iterate through every character of target string
    char temp;
    strcpy(target, "");       // to make target string empty
    while (source[i] != '\0') // runs till the iteration found the empty index position
    {
        if (source[i] == '(')
        {
            push(stack, source[i]); // acccording to algorithm when we find open brace push it into stack
            i++;
        }

        else if ((isdigit(source[i])) || (isalpha(source[i])))
        {
            target[j] = source[i]; // according to algorithm if we fing digit or alpha add it to the postfix target is the postfix here
            j++;
            i++;
        }
        else if ((source[i] == '+') || (source[i] == '-') || (source[i] == '*') || (source[i] == '/') || (source[i] == '%')) // to check the operators
        {
            while ((top != -1) && (stack[top] != '(') && (getpriority(stack[top]) >= getpriority(source[i]))) // to check the presedence of operators
            {   // if any of the condition is false it push that character to stack else it will pop                                           
                // if stack operator has greater presednec than reading pop it from stack and add to the postfix expression
                target[j] = pop(stack);
                j++;
            }
            push(stack, source[i]); // to push the operators
            i++;
        }
        else if (source[i] == ')')
        {
            while ((top != -1) && (stack[top] != '(')) // runs until top become -1 or until it get the open brace as per the algorithm
            {
                target[j] = pop(stack); // the element which delete stores in target string
                j++;
            }
            if (top == -1)
            {
                printf("Invalid expression\n"); // if the entered string is empty
            }
            temp = pop(stack); // to remove the open brace like if expression is -(a+b)
            i++;
        }
        else
        {
            printf("\nInvalid expression");
        }
    }
    while ((top != -1) && (stack[top] != '(')) // if their are any other elements inn stack not followed by the uper conditions then it follows that
    {
        target[j] = pop(stack);
        j++;
    }
    target[j] = '\0';
}

void prefixtoinfix(char source[],char target[])
{
    int i=0,j=0;
    char ope1[max],ope2[max];//for two opeands according to algorithm
    strcpy(target,"");
    
    
    for(i=0;source[i]!='\0';i--)//loop as wen reverse the prefix expression so iterating each character
    {
        if(isalnum(source[i]))
        {
            push(stack,source[i]);//if it is a alpha or digti push it into stack
        }
        else{
            ope1[0]=pop(stack);//delete recent two operators and store in thse variables
            ope2[0]=pop(stack);
            //sprintf to print particular string
            sprintf(t,"(%c%c%c)",ope1[0],source[i],ope2[0]);//make that string after pop 2 opaerands in parenthesis seperately
            strcat(target,t);
            push(stack,target[j]);
            j++;
        }
    }


}
void postfixtoinfix(char source[],char target[])
{
    int i=0,j=0;
    char ope1[max],ope2[max];//for two opeands according to algorithm
    strcpy(target,"");
    for(i=0;source[i]='\0';i++)//loop as wen reverse the prefix expression so iterating each character
    {
        if(isalnum(source[i]))
        {
            push(stack,source[i]);//if it is a alpha or digti push it into stack
        }
        else{
            ope2[0]=pop(stack);//delete recent two operators and store in thse variables
            ope1[0]=pop(stack);
            //sprintf to print particular string
            sprintf(t,"(%c%c%c)",ope1[0],source[i],ope2[0]);//make that string after pop 2 opaerands in parenthesis seperately
            strcat(target,t);
            push(stack,target[j]);
            j++;
        }
    }


}
int getpriority(char o) // to check the presedence of operators
{
    if ((o == '/') || (o == '*') || (o == '%'))
    {
        return 1;
    }
    else if ((o == '+') || (o == '-'))
    {
        return 0;
    }
}
void push(char stack[], char val) // to push the elements
{
    if (top == max - 1)
    {
        printf("It is overflow");
    }
    else
    {
        top++;
        stack[top] = val;
    }
}
char pop(char stack[]) // to delete the elements
{
    if (top == -1)
    {
        printf("UNder flow");
    }
    else
    {
        val = stack[top];
        top--;
    }
    return val;
}                                 
