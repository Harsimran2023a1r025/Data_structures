#include <stdio.h>
#include <stdlib.h>
void push();
void pop();
void display();
struct node
{
    int val;//vlaue part in datatype
    struct node *next;//address part in that datatype
};
struct node *head;//head that is linked to the first node

void main()
{
    int choice = 0;
    printf("\nStack operations using linked list\n");
    while (choice != 4)
    {
        printf("\n\nChose one from the below options...\n");
        printf("\n1.Push\n2.Pop\n3.Show\n4.Exit");
        printf("\n Enter your choice \n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
        {
            push();
            break;
        }
        case 2:
        {
            pop();
            break;
        }
        case 3:
        {
            display();
            break;
        }
        case 4:
        {
            printf("Exiting....");
            break;
        }
        default:
        {
            printf("Please Enter valid choice ");
        }
        };
    }
}
void push()
{
    int val;//value to push
    struct node *ptr = (struct node *)malloc(sizeof(struct node));//initializing size for the nodes
    if (ptr == NULL)//null indicates to the last node
//if ptr collapses with null it means the linked list is full
    {
        printf("overflow");
    }
    else
    {
        printf("Enter the value");
        scanf("%d", &val);//taking the vlaue to be pushed from the user
        //this if is only to push the elemnt in first node
        if (head == NULL)//checking from the starting of the linked list as list is empty first node is linked to the null 
        {
            ptr->val = val;//in ptr pointer value the entered value is stored 
            ptr->next = NULL;//in pointer ptr next null value is stored i.e the null value is transfered to the next step
            head = ptr;//the value of ptr is stored in head 
        }
        else//this is to push the elements after the first position
        {
            ptr->val = val;//value is stored in ptr val 
            ptr->next = head;//next of pt stores the head node value 
            head = ptr;//then again head is linked to the ptr i.e to the first node
        }
        printf("Item pushed");
    }
}

void pop()
{
    int item;//to delete
    struct node *ptr;//calling the push elemnets in the push function to delete from that struct part
    if (head == NULL)//if null collapses with the head value it means that the list is empty
    {
        printf("Underflow");
    }
    else
    {
        item = head->val;//head value i.e start value goes to item
        ptr = head;//first ele stored in ptr
        head = head->next;//and head moves to next node 
        free(ptr);//and than free that first elemnt that stored in ptr
        printf("Item popped");
    }
}
void display()
{
    int i;
    struct node *ptr;//again calling the struct of that baddress in which we've stored the pushed elements 
    ptr = head;
    if (ptr == NULL)//underflow condition
    {
        printf("Stack is empty\n");
    }
    else
    {
        printf("Printing Stack elements \n");
        while (ptr != NULL)//while iterating ptr moves to the last print the pointer or we said that print the list
        {
            printf("%d\n", ptr->val);//print thye value stored in ptr variable 
            ptr = ptr->next;//then it is incrementing i.e ptr next value goes to ptr after every iteration 
        }
    }
}
