#include <stdio.h>

#define MAX_SIZE 100

int main() {
    int arr[MAX_SIZE];
    int n = 0; // Current number of elements in the array

    int choice, element, position, i;

    do {
        printf("\nArray Operations Menu:\n");
        printf("1. Insert Element\n");
        printf("2. Delete Element\n");
        printf("3. Search Element\n");
        printf("4. Display Array\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                if (n >= MAX_SIZE) {
                    printf("Array is full. Cannot insert more elements.\n");
                    break;
                }
                printf("Enter element to insert: ");
                scanf("%d", &element);
                printf("Enter position to insert (0-%d): ", n);
                scanf("%d", &position);

                if (position < 0 || position > n) {
                    printf("Invalid position.\n");
                    break;
                }

                // Shift elements to the right to make space for new element
                for (i = n; i > position; i--)
                    arr[i] = arr[i - 1];

                arr[position] = element;
                n++; // Increase size of array
                printf("Element inserted successfully.\n");
                break;

            case 2:
                if (n == 0) {
                    printf("Array is empty. Cannot delete element.\n");
                    break;
                }
                printf("Enter position to delete (0-%d): ", n - 1);
                scanf("%d", &position);

                if (position < 0 || position >= n) {
                    printf("Invalid position.\n");
                    break;
                }

                // Shift elements to the left to fill the gap created by deletion
                for (i = position; i < n - 1; i++)
                    arr[i] = arr[i + 1];

                n--; // Decrease size of array
                printf("Element deleted successfully.\n");
                break;

            case 3:
                if (n == 0) {
                    printf("Array is empty. Cannot search element.\n");
                    break;
                }
                printf("Enter element to search: ");
                scanf("%d", &element);

                for (i = 0; i < n; i++) {
                    if (arr[i] == element) {
                        printf("Element found at position %d.\n", i);
                        break;
                    }
                }

                if (i == n)
                    printf("Element not found in the array.\n");
                break;

            case 4:
                if (n == 0) {
                    printf("Array is empty.\n");
                    break;
                }
                printf("Elements in the array: ");
                for (i = 0; i < n; i++)
                    printf("%d ", arr[i]);
                printf("\n");
                break;

            case 5:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    } while (choice != 5);

    return 0;
}
