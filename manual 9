#include <stdio.h>
#include <stdlib.h>

// Structure of a node
struct Node {
    int data;
    struct Node *next;
};

// Function to insert a new node at the beginning of the list
struct Node *insertBegin(struct Node *last, int data) {
    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = data;

    if (last == NULL) {
        new_node->next = new_node; // For the first node, point next to itself
        last = new_node; // Update the last pointer
    } else {
        new_node->next = last->next; // Point new node to the next of last
        last->next = new_node; // Point last to new node
    }

    return last;
}

// Function to delete a node with a given key
struct Node *deleteNode(struct Node *last, int key) {
    if (last == NULL) return NULL;

    struct Node *curr = last->next;
    struct Node *prev = last;

    // If the list has only one node
    if (curr == last && curr->data == key) {
        free(curr);
        return NULL;
    }

    // Traverse the list to find the node to be deleted
    do {
        if (curr->data == key) {
            prev->next = curr->next;
            if (curr == last) last = prev; // If the last node is to be deleted, update last
            free(curr);
            break;
        }
        prev = curr;
        curr = curr->next;
    } while (curr != last->next);

    return last;
}

// Function to perform linear search
void linearSearch(struct Node *last, int key) {
    if (last == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node *curr = last->next;
    int found = 0;
    int position = 1;

    // Traverse the list to find the key
    do {
        if (curr->data == key) {
            printf("Element %d found at position %d\n", key, position);
            found = 1;
            break;
        }
        curr = curr->next;
        position++;
    } while (curr != last->next);

    if (!found) printf("Element %d not found in the list\n", key);
}

// Function to display the circular linked list
void displayList(struct Node *last) {
    if (last == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node *temp = last->next;

    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != last->next);
    printf("\n");
}

int main() {
    struct Node *last = NULL;
    int choice, data, key;

    do {
        printf("\n1. Insert\n");
        printf("2. Delete\n");
        printf("3. Search\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to insert: ");
                scanf("%d", &data);
                last = insertBegin(last, data);
                break;
            case 2:
                printf("Enter the element to delete: ");
                scanf("%d", &key);
                last = deleteNode(last, key);
                break;
            case 3:
                printf("Enter the element to search: ");
                scanf("%d", &key);
                linearSearch(last, key);
                break;
            case 4:
                printf("The list is: ");
                displayList(last);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    return 0;
}
