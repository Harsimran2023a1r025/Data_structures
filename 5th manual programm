#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define max 100
char stack[max];
int top = -1;
void push(char stack[], char);
char pop(char stack[]);
void infixtopostfix(char source[], char target[]); // source is given expression and target is the postfix
int getpriority(char);                             // to check the presedence of operators
int main()
{
    char infix[100], postfix[100];
    printf("Enter the infix expression\n");
    scanf("%s", &infix);
    strcpy(postfix, ""); // to make postfix string empty all 100 positions
    infixtopostfix(infix, postfix);
    printf("\nthe postfix expression is\n");
    printf("%s", postfix);
}
void infixtopostfix(char source[], char target[])
{
    int i = 0, j = 0;
    char temp;
    strcpy(target,"");//to make target string empty
    while (source[i] != '\0')
    {
        if (source[i] == '(')
        {
            push(stack, source[i]);
            i++;
        }
        else if (source[i] == ')')
        {
            while ((top != -1) && (stack[top] == '(')) // runs until top become -1 or until it get the open brace as per the algorithm
            {
                target[j] = pop(stack); // the element which delete stores in target string
                j++;
            }
            if(top==-1)
            {
                printf("Invalid expression\n");//if the entered string is empty
                exit(1);
            }
            temp=pop(stack);//to remove the open brace
            i++;
        }
        else if (isdigit(source[i])||isalpha(source[i]))
        {
            target[j]=source[i];//according to algorithm if we fing digit or alpha add it to the postfix 
            j++;
            i++;
        }
        else if(source[i]=='+'||source[i]=='-'||source[i]=='*'||source[i]=='/'||source[i]=='%')//to check the operators
        {
            while ((top!=-1)&&(stack[top]!='(')&&(getpriority(stack[top])>getpriority(source[i])))//to check mthe presedence of operators 
            {//if stack operator has greater presednec than reading pop it from stack and add to the postfix expression
                target[j]=pop(stack);
                j++;
            }
            push(stack,source[i]);
            i++;
            
        }
        else{
            printf("\nIncorrect elkement in expression");
            exit(1);
        }
        while ((top!=-1)&&(stack[top]=='('))
        {
            target[j]=pop(stack);
            j++;
        }
        target[j]='\0';
    }
}
